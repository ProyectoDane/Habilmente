package com.belatrix.apadea.datamodel;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.belatrix.apadea.datamodel.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FirstName = new Property(1, String.class, "FirstName", false, "FIRST_NAME");
        public final static Property LastName = new Property(2, String.class, "LastName", false, "LAST_NAME");
        public final static Property Age = new Property(3, Integer.class, "Age", false, "AGE");
        public final static Property Gender = new Property(4, String.class, "Gender", false, "GENDER");
        public final static Property Type = new Property(5, String.class, "Type", false, "TYPE");
        public final static Property Avatar = new Property(6, String.class, "Avatar", false, "AVATAR");
        public final static Property ProfileImage = new Property(7, byte[].class, "ProfileImage", false, "PROFILE_IMAGE");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'FIRST_NAME' TEXT," + // 1: FirstName
                "'LAST_NAME' TEXT," + // 2: LastName
                "'AGE' INTEGER," + // 3: Age
                "'GENDER' TEXT," + // 4: Gender
                "'TYPE' TEXT," + // 5: Type
                "'AVATAR' TEXT," + // 6: Avatar
                "'PROFILE_IMAGE' BLOB);"); // 7: ProfileImage
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String FirstName = entity.getFirstName();
        if (FirstName != null) {
            stmt.bindString(2, FirstName);
        }
 
        String LastName = entity.getLastName();
        if (LastName != null) {
            stmt.bindString(3, LastName);
        }
 
        Integer Age = entity.getAge();
        if (Age != null) {
            stmt.bindLong(4, Age);
        }
 
        String Gender = entity.getGender();
        if (Gender != null) {
            stmt.bindString(5, Gender);
        }
 
        String Type = entity.getType();
        if (Type != null) {
            stmt.bindString(6, Type);
        }
 
        String Avatar = entity.getAvatar();
        if (Avatar != null) {
            stmt.bindString(7, Avatar);
        }
 
        byte[] ProfileImage = entity.getProfileImage();
        if (ProfileImage != null) {
            stmt.bindBlob(8, ProfileImage);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FirstName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // LastName
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // Age
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Gender
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Avatar
            cursor.isNull(offset + 7) ? null : cursor.getBlob(offset + 7) // ProfileImage
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFirstName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLastName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAge(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setGender(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAvatar(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setProfileImage(cursor.isNull(offset + 7) ? null : cursor.getBlob(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
