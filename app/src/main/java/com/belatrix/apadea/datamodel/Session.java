package com.belatrix.apadea.datamodel;

import java.util.List;
import com.belatrix.apadea.datamodel.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table SESSION.
 */
public class Session {

    private Long id;
    private Boolean closed;
    private java.util.Date sessionStartDate;
    private java.util.Date sessionEndDate;
    private Long therapistId;
    private Long subjectId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SessionDao myDao;

    private User therapist;
    private Long therapist__resolvedKey;

    private User subject;
    private Long subject__resolvedKey;

    private List<Log> logList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Session() {
    }

    public Session(Long id) {
        this.id = id;
    }

    public Session(Long id, Boolean closed, java.util.Date sessionStartDate, java.util.Date sessionEndDate, Long therapistId, Long subjectId) {
        this.id = id;
        this.closed = closed;
        this.sessionStartDate = sessionStartDate;
        this.sessionEndDate = sessionEndDate;
        this.therapistId = therapistId;
        this.subjectId = subjectId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSessionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Boolean getClosed() {
        return closed;
    }

    public void setClosed(Boolean closed) {
        this.closed = closed;
    }

    public java.util.Date getSessionStartDate() {
        return sessionStartDate;
    }

    public void setSessionStartDate(java.util.Date sessionStartDate) {
        this.sessionStartDate = sessionStartDate;
    }

    public java.util.Date getSessionEndDate() {
        return sessionEndDate;
    }

    public void setSessionEndDate(java.util.Date sessionEndDate) {
        this.sessionEndDate = sessionEndDate;
    }

    public Long getTherapistId() {
        return therapistId;
    }

    public void setTherapistId(Long therapistId) {
        this.therapistId = therapistId;
    }

    public Long getSubjectId() {
        return subjectId;
    }

    public void setSubjectId(Long subjectId) {
        this.subjectId = subjectId;
    }

    /** To-one relationship, resolved on first access. */
    public User getTherapist() {
        Long __key = this.therapistId;
        if (therapist__resolvedKey == null || !therapist__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User therapistNew = targetDao.load(__key);
            synchronized (this) {
                therapist = therapistNew;
            	therapist__resolvedKey = __key;
            }
        }
        return therapist;
    }

    public void setTherapist(User therapist) {
        synchronized (this) {
            this.therapist = therapist;
            therapistId = therapist == null ? null : therapist.getId();
            therapist__resolvedKey = therapistId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public User getSubject() {
        Long __key = this.subjectId;
        if (subject__resolvedKey == null || !subject__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User subjectNew = targetDao.load(__key);
            synchronized (this) {
                subject = subjectNew;
            	subject__resolvedKey = __key;
            }
        }
        return subject;
    }

    public void setSubject(User subject) {
        synchronized (this) {
            this.subject = subject;
            subjectId = subject == null ? null : subject.getId();
            subject__resolvedKey = subjectId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Log> getLogList() {
        if (logList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LogDao targetDao = daoSession.getLogDao();
            List<Log> logListNew = targetDao._querySession_LogList(id);
            synchronized (this) {
                if(logList == null) {
                    logList = logListNew;
                }
            }
        }
        return logList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetLogList() {
        logList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
