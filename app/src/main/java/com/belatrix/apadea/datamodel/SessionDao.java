package com.belatrix.apadea.datamodel;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.belatrix.apadea.datamodel.Session;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SESSION.
*/
public class SessionDao extends AbstractDao<Session, Long> {

    public static final String TABLENAME = "SESSION";

    /**
     * Properties of entity Session.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Closed = new Property(1, Boolean.class, "closed", false, "CLOSED");
        public final static Property SessionStartDate = new Property(2, java.util.Date.class, "sessionStartDate", false, "SESSION_START_DATE");
        public final static Property SessionEndDate = new Property(3, java.util.Date.class, "sessionEndDate", false, "SESSION_END_DATE");
        public final static Property TherapistId = new Property(4, Long.class, "therapistId", false, "THERAPIST_ID");
        public final static Property SubjectId = new Property(5, Long.class, "subjectId", false, "SUBJECT_ID");
    };

    private DaoSession daoSession;


    public SessionDao(DaoConfig config) {
        super(config);
    }
    
    public SessionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SESSION' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CLOSED' INTEGER," + // 1: closed
                "'SESSION_START_DATE' INTEGER," + // 2: sessionStartDate
                "'SESSION_END_DATE' INTEGER," + // 3: sessionEndDate
                "'THERAPIST_ID' INTEGER," + // 4: therapistId
                "'SUBJECT_ID' INTEGER);"); // 5: subjectId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SESSION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Session entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean closed = entity.getClosed();
        if (closed != null) {
            stmt.bindLong(2, closed ? 1l: 0l);
        }
 
        java.util.Date sessionStartDate = entity.getSessionStartDate();
        if (sessionStartDate != null) {
            stmt.bindLong(3, sessionStartDate.getTime());
        }
 
        java.util.Date sessionEndDate = entity.getSessionEndDate();
        if (sessionEndDate != null) {
            stmt.bindLong(4, sessionEndDate.getTime());
        }
 
        Long therapistId = entity.getTherapistId();
        if (therapistId != null) {
            stmt.bindLong(5, therapistId);
        }
 
        Long subjectId = entity.getSubjectId();
        if (subjectId != null) {
            stmt.bindLong(6, subjectId);
        }
    }

    @Override
    protected void attachEntity(Session entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Session readEntity(Cursor cursor, int offset) {
        Session entity = new Session( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // closed
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // sessionStartDate
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // sessionEndDate
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // therapistId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // subjectId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Session entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClosed(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setSessionStartDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setSessionEndDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setTherapistId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setSubjectId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Session entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Session entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUserDao().getAllColumns());
            builder.append(" FROM SESSION T");
            builder.append(" LEFT JOIN USER T0 ON T.'THERAPIST_ID'=T0.'_id'");
            builder.append(" LEFT JOIN USER T1 ON T.'SUBJECT_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Session loadCurrentDeep(Cursor cursor, boolean lock) {
        Session entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User therapist = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setTherapist(therapist);
        offset += daoSession.getUserDao().getAllColumns().length;

        User subject = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setSubject(subject);

        return entity;    
    }

    public Session loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Session> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Session> list = new ArrayList<Session>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Session> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Session> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
